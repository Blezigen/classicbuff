/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  MatchDto,
  MatchDtoFromJSON,
  MatchDtoToJSON,
  MatchPageDto,
  MatchPageDtoFromJSON,
  MatchPageDtoToJSON
} from "../models";

export interface MatchControllerMatchRequest {
  id: number;
}

export interface MatchControllerMatchesRequest {
  page: number;
  perPage?: number;
  mode?: number;
}

/**
 *
 */
export class MatchApi extends runtime.BaseAPI {
  /**
   */
  private async matchControllerMatchRaw(
    requestParameters: MatchControllerMatchRequest
  ): Promise<runtime.ApiResponse<MatchDto>> {
    this.matchControllerMatchValidation(requestParameters);
    const context = this.matchControllerMatchContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => MatchDtoFromJSON(jsonValue));
  }

  /**
   */
  private matchControllerMatchValidation(requestParameters: MatchControllerMatchRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling matchControllerMatch."
      );
    }
  }

  /**
   */
  matchControllerMatchContext(requestParameters: MatchControllerMatchRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/match/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  matchControllerMatch = async (id: number): Promise<MatchDto> => {
    const response = await this.matchControllerMatchRaw({ id: id });
    return await response.value();
  };

  useMatchControllerMatch(id: number, config?: ConfigInterface<MatchDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.matchControllerMatchContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.matchControllerMatch(id!) : undefined, config);
  }

  /**
   */
  private async matchControllerMatchesRaw(
    requestParameters: MatchControllerMatchesRequest
  ): Promise<runtime.ApiResponse<MatchPageDto>> {
    this.matchControllerMatchesValidation(requestParameters);
    const context = this.matchControllerMatchesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => MatchPageDtoFromJSON(jsonValue));
  }

  /**
   */
  private matchControllerMatchesValidation(requestParameters: MatchControllerMatchesRequest) {
    if (requestParameters.page === null || requestParameters.page === undefined) {
      throw new runtime.RequiredError(
        "page",
        "Required parameter requestParameters.page was null or undefined when calling matchControllerMatches."
      );
    }
  }

  /**
   */
  matchControllerMatchesContext(requestParameters: MatchControllerMatchesRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters["per_page"] = requestParameters.perPage;
    }

    if (requestParameters.mode !== undefined) {
      queryParameters["mode"] = requestParameters.mode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/match/all`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  matchControllerMatches = async (page: number, perPage?: number, mode?: number): Promise<MatchPageDto> => {
    const response = await this.matchControllerMatchesRaw({ page: page, perPage: perPage, mode: mode });
    return await response.value();
  };

  useMatchControllerMatches(
    page: number,
    perPage?: number,
    mode?: number,
    config?: ConfigInterface<MatchPageDto, Error>
  ) {
    let valid = true;

    if (page === null || page === undefined || Number.isNaN(page)) {
      valid = false;
    }

    const context = this.matchControllerMatchesContext({ page: page!, perPage: perPage!, mode: mode! });
    return useSWR(
      JSON.stringify(context),
      valid ? () => this.matchControllerMatches(page!, perPage!, mode!) : undefined,
      config
    );
  }
}
