/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  private async steamControllerDiscordAuthRaw(): Promise<runtime.ApiResponse<void>> {
    this.steamControllerDiscordAuthValidation();
    const context = this.steamControllerDiscordAuthContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private steamControllerDiscordAuthValidation() {}

  /**
   */
  steamControllerDiscordAuthContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/auth/steam`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  steamControllerDiscordAuth = async (): Promise<void> => {
    await this.steamControllerDiscordAuthRaw();
  };

  useSteamControllerDiscordAuth(config?: ConfigInterface<void, Error>) {
    let valid = true;

    const context = this.steamControllerDiscordAuthContext();
    return useSWR(JSON.stringify(context), valid ? () => this.steamControllerDiscordAuth() : undefined, config);
  }

  /**
   */
  private async steamControllerSteamAuthRequestRaw(): Promise<runtime.ApiResponse<void>> {
    this.steamControllerSteamAuthRequestValidation();
    const context = this.steamControllerSteamAuthRequestContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private steamControllerSteamAuthRequestValidation() {}

  /**
   */
  steamControllerSteamAuthRequestContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/auth/steam/callback`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  steamControllerSteamAuthRequest = async (): Promise<void> => {
    await this.steamControllerSteamAuthRequestRaw();
  };

  useSteamControllerSteamAuthRequest(config?: ConfigInterface<void, Error>) {
    let valid = true;

    const context = this.steamControllerSteamAuthRequestContext();
    return useSWR(JSON.stringify(context), valid ? () => this.steamControllerSteamAuthRequest() : undefined, config);
  }
}
