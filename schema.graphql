# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type GameServerOperatorDTO {
  gameServers: [GameServersDTO!]!
  url: String!
}

type GameServersDTO {
  mode: Float
  running: Boolean!
  url: String!
}

type HeroSummary {
  assists: Float!
  deaths: Float!
  games: Float!
  hero: String!
  kills: Float!
  losses: Float!
  wins: Float!
}

type ImageEntity {
  id: String!
  path: String!
}

type Match {
  duration: Float!
  id: Float!
  players: [PlayerInMatch!]!
  radiant_win: Boolean!
  timestamp: String!
  type: Float!
}

type Mutation {
  KillServer(url: String!): [GameServerOperatorDTO!]!
  RestartServer(mode: MatchmakingMode!, url: String!): [GameServerOperatorDTO!]!
  StartServer(mode: MatchmakingMode!, url: String!): [GameServerOperatorDTO!]!
  createTeam(image: String!, name: String!): TeamEntity!
  createTournament(mode: Dota_GameMode!, name: String!): TournamentEntity!
  joinTournament(id: Float!, team_id: Float!): TournamentEntity!
}

type OverallStats {
  games: Float!
  loss: Float!
  wins: Float!
}

type PaginatedMatch {
  data: [Match!]
  page: Float!
  pages: Float!
}

type PaginatedTeam {
  data: [TeamEntity!]
  page: Float!
  pages: Float!
}

type PartyDTO {
  id: Float!
  leader: QueuePlayerDTO!
  players: [QueuePlayerDTO!]!
}

type Player {
  games: [PlayerInMatch!]!
  mmr: Float!
  name: String!
  steam_id: String!
}

type PlayerInMatch {
  assists: Float!
  deaths: Float!
  denies: Float!
  gpm: Float!
  hero: String!
  id: Float!
  items: String!
  kills: Float!
  last_hits: Float!
  level: Float!
  player: Player!
  team: Float!
  xpm: Float!
}

type PlayerStatsDto {
  denies: Float!
  games: Float!
  gpm: Float!
  hero: String!
  kda: Float!
  last_hits: Float!
  loss: Float!
  playerSteamId: String!
  wins: Float!
  xpm: Float!
}

type PlayerStatsModel {
  heroes: [PlayerStatsDto!]!
  overall: OverallStats!
}

type Query {
  GameServers: [GameServerOperatorDTO!]!
  HeroMatches(hero: String!, page: Int!): PaginatedMatch!
  Heroes: [HeroSummary!]!
  History(mode: Int, page: Int!): PaginatedMatch!
  Ladder: [Player!]!
  Match(id: Int!): Match!
  Player(steam_id: String!): Player!
  PlayerHistory(hero: String, page: Int!, steam_id: String!): PaginatedMatch!
  PlayerStats(steam_id: String!): PlayerStatsModel!
  Queues: [QueueDTO!]!
  Rooms: [RoomDTO!]!
  Team(id: Int!): TeamEntity!
  Teams(page: Int!): PaginatedTeam!
  Tournaments: [TournamentEntity!]!
}

type QueueDTO {
  mode: Float!
  parties: [PartyDTO!]!
}

type QueuePlayerDTO {
  id: String!
  name: String!
  realm: Float!
}

type RoomDTO {
  id: Float!
  mode: Float!
  parties: [PartyDTO!]!
}

type TeamEntity {
  creator: User!
  id: Float!
  image: ImageEntity!
  members: [TeamMemberEntity!]!
  name: String!
}

type TeamMemberEntity {
  user: User!
}

type TournamentEntity {
  entries: [TournamentTeamEntryEntity!]!
  id: Float!
  mode: Float!
  name: String!
  open: Boolean!
}

type TournamentTeamEntryEntity {
  id: Float!
  team: TeamEntity!
  tournament: TournamentEntity!
}

type User {
  discord_id: String!
  player: Player!
  role: Float!
  steam_id: String!
}

enum Dota_GameMode {
  ABILITY_DRAFT
  ALLPICK
  ALL_RANDOM
  BALANCED_DRAFT
  CAPTAINS_MODE
  DIRETIDE
  GREEVILING
  LEAST_PLAYED
  LIMITED_HEROES
  MID_ONLY
  RANDOM_DRAFT
  REVERSE_CAPTAINS_MODE
  SINGLE_DRAFT
  SOLOMID
  TUTORIAL
}

enum MatchmakingMode {
  ABILITY_DRAFT
  DIRETIDE
  GREEVILING
  RANKED
  SOLOMID
  UNRANKED
}
